{"version":3,"sources":["Components/CounterValue/CounterValue.js","Components/Counter/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["CounterValue","props","className","value","Counter","useState","counterValue","setCounterValue","newCounterValue","setNewCounterValue","loading","setLoading","maximumValue","process","REACT_APP_MAX_VALUE","React","useEffect","axios","get","then","response","data","handleChange","put","ShivamDwivedi","style","fontSize","onClick","prev","type","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QASeA,EANM,SAACC,GAClB,OACI,sBAAKC,UAAU,QAAf,4BAAuCD,EAAME,U,gBCqFtCC,G,MArFC,WACd,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CF,mBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAeC,wJAAYC,qBAAuB,IAMxDC,IAAMC,WAAU,WACdC,IAAMC,IALN,+EAKkBC,MAAK,SAAAC,GACrBb,EAAgBa,EAASC,KAAOD,EAASC,KAAO,GAChDZ,EAAmBW,EAASC,KAAOD,EAASC,KAAO,QAEpD,IAEHN,IAAMC,WAAU,WACdM,EAAahB,KACZ,CAACA,IAEJ,IAAMgB,EAAe,SAAAnB,GACnBI,EAAgBJ,GAChBc,IACGM,IAhBH,qEAkBI,CACEC,cAAerB,GAEjBQ,GAAW,IAEZQ,MAAK,SAAAC,GAAa,IAAD,EAChBX,EAAkB,UAACW,EAASC,YAAV,aAAC,EAAeG,eAClCb,GAAW,OAIjB,OACE,gCACE,8BACGD,EACC,sBAAKR,UAAU,mBAAf,UACE,qBAAKA,UAAU,SAAf,eAAgC,IAChC,qBAAKuB,MAAO,CAAEC,SAAU,QAAxB,oCAA+D,OAGjE,MAGJ,sBAAKxB,UAAU,iBAAf,UACE,sBAAKA,UAAU,YAAf,UACE,wBACEA,UAAU,YACVyB,QAAS,kBAAMpB,GAAgB,SAAAqB,GAAI,OAAIA,EAAO,MAFhD,eAMA,qBAAK1B,UAAU,iBAAf,SACE,uBACE2B,KAAK,SACL1B,MAAOG,EACPwB,SAAU,SAAAC,GAAC,OACTA,EAAEC,OAAO7B,OAASS,EACdL,GAAiBwB,EAAEC,OAAO7B,OAC1B,UAIV,wBACED,UAAU,YACVyB,QAAS,kBACPpB,GAAgB,SAAAqB,GAAI,OAClBA,EAAO,GAAKhB,EAAegB,EAAO,EAAIA,MAJ5C,kBAWF,cAAC,EAAD,CAAczB,MAAOK,YC1EdyB,MARf,WACE,OACE,8BACI,cAAC,EAAD,OCOOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1382207d.chunk.js","sourcesContent":["import React from \"react\";\nimport './CounterValue.css'\n\nconst CounterValue = (props) => {\n    return(\n        <div className=\"value\">Counter Value: {props.value}</div>\n    )\n}\n\nexport default CounterValue;","import React, { useState } from 'react';\nimport CounterValue from '../CounterValue/CounterValue';\nimport axios from 'axios';\nimport './Counter.css';\n\nconst Counter = () => {\n  const [counterValue, setCounterValue] = useState(1);\n  const [newCounterValue, setNewCounterValue] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const maximumValue = process.env.REACT_APP_MAX_VALUE || 1000;  //Taking value of maximumValue from environment variable if present else initialising it to 1000\n  const getURL =\n    'https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json';\n  const putURL =\n    'https://interview-8e4c5-default-rtdb.firebaseio.com/front-end.json';\n\n  React.useEffect(() => {\n    axios.get(getURL).then(response => {\n      setCounterValue(response.data ? response.data : 1);\n      setNewCounterValue(response.data ? response.data : 1);\n    });\n  }, []);  //For initialising counterValue from getURL if any number is returned else equals to 1\n\n  React.useEffect(() => {\n    handleChange(counterValue);\n  }, [counterValue]); //For making PUT request each time counterValue changes\n\n  const handleChange = value => {\n    setCounterValue(value);\n    axios\n      .put(\n        putURL,\n        {\n          ShivamDwivedi: value,\n        },\n        setLoading(true),\n      )\n      .then(response => {\n        setNewCounterValue(response.data?.ShivamDwivedi);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div>\n      <div>\n        {loading ? (\n          <div className=\"loader-container\">\n            <div className=\"loader\"> </div>{' '}\n            <div style={{ fontSize: '12px' }}> Saving counter value </div>{' '}\n          </div>\n        ) : (\n          ' '\n        )}\n      </div>\n      <div className=\"main-container\">\n        <div className=\"container\">\n          <button\n            className=\"decButton\"\n            onClick={() => setCounterValue(prev => prev - 1)}\n          >\n            -\n          </button>\n          <div className=\"countContainer\">\n            <input\n              type=\"number\"\n              value={counterValue}\n              onChange={e =>\n                e.target.value <= maximumValue\n                  ? setCounterValue(+e.target.value)\n                  : null\n              }  //For initialising a maximimum value  too\n            />\n          </div>\n          <button\n            className=\"incButton\"\n            onClick={() =>\n              setCounterValue(prev =>\n                prev + 1 <= maximumValue ? prev + 1 : prev,\n              )\n            }   //For initialising a maximimum value  too\n          >\n            +\n          </button>\n        </div>\n        <CounterValue value={newCounterValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default Counter;\n","import Counter from './Components/Counter/Counter';\n\nfunction App() {\n  return (\n    <div>\n        <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}